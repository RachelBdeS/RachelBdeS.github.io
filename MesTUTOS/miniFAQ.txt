<!-- 
------------------------------------------------------------
• Normes pour le Référencement + nouveautés HTML5
  Squelette HTML (à copier-coller dans les nouveaux fichiers vierges)
------------------------------------------------------------
<!DOCTYPE html>
  <html>
  <!-- NB: OU (aide beaucoup le referencement sur www.google.fr mais penalise celui de sur www.google.com) :
  <!-- <html lang="fr"> -->
  
  <head>
    <!-- Indispensable -->
    <!-- NB: la reconnaissance de caractères en utf-8 comprend tous les languages existants: -->
    <meta charset="utf-8"> 
    <!-- <meta name="viewport" content="width=device-width, user-scalable=yes"> -->
    
    <!-- Nécessaire -->
    <title>Titre du site web</title>
    
    <!-- Facutltatif -->
    <!-- <link rel="icon" href="icone.ico"> -->
    
    <!-- Préférable -->
    <!-- NB: écrire les CSS dans des fichiers externes pour que le navigateur les chargent qu'une fois, indépendament des pages web (fichiers html, php, asp): -->
    <!-- <link href="./css/style.css" rel="stylesheet"> -->
    <!-- NB: OU (avec le chemin absolu commencant par "http://localhost/" avec WAMP): -->
    <!-- <link href="http://localhost/<path_to_this_folder>/css/<style_sheet_name>.css" rel="stylesheet"> -->
    
    <!-- Facutltatif -->
    <!-- <meta name="description" content=""> -->
    <!-- <meta name="keywords" content=""> -->
    <!-- <meta name="author" content=""> -->
  </head>
  
  <body>
    <header> <!-- Doit toujours être placé directement après BODY. -->
    
      <a href="/" role="slider"><img src="logo.jpg" alt="Texte nécessaire qui sera lu par les logiciels pour aveugles. S'affichera si l'image ne le peut."></a>
      
      <!-- NB: les <section> remplacent desormais les <div> — les roles="" ont autant de poids que les <tags> : -->
      <section role="navigation"> 
        <ul role="menubar">
          <a href="#"><li>Partie 1</li></a>
          <a href="#"><li>Partie 2</li></a>
          <a href="#"><li>Partie 3</li></a>
          <a href="#"><li>Partie 4</li></a>
          <a href="#"><li>Partie 5</li></a>
          <a href="#"><li>Partie 6</li></a>
        </ul>
        <span role="search"><input type="text"><button>Rechercher</button></span>
      </section>
      
    </header>
    
    <nav role="menunav">
      Menu vertical.
      <ul>
        <li><a href=""></a></li>
        <li><a href="">Element 1 de la liste</a>
          <ul>
          <li><a href="">Sous element 1 de la liste 2</a></li>
          </ul>
        </li>
      </ul>
    </nav>
    
    <section role="main"> <!-- <main> directement eput cuaser des problemes en css avec un layout grid -->
    
      <!-- NB: Une seule balise H1 par page web (245 characters maximum): -->  
      <h1>Titre de la page</h1>
      
      <p>Corps main</p>
      
      <!-- NB: section vraiment independante (avec du contenu statique capable de s'afficher de facon optimale depuis n'importe où). Ne pas utiliser dans le doute:
      <article> 
        <!-- NB: les <strong> remplacent desormais les <b>: -->
        Corps statique de l'<strong>article</strong>. 
      </article>
      
    </main>

    <aside>
    
      <!-- NB: Il peut y avoir un maximum de 5 titres-sections imbriquées (h2 à h6): -->
      <h2>Titre aside</h2>
      
      <section role="note">
        <h3>Titre note</h3>
        <p>Corps note</p>
      </section>
      
    </aside>
    
    <footer id="footer" role="banner">
    
      <p><a href="#">Mentions legales :: Plan du site :: Contact</a></p>
      
      <p>Copyleft</p>
      
    </footer>
    
  </body>
</html>
------------------------------------------------------------
Squelette CSS en Grid layout (à copier-coller dans les nouveaux fichiers)
------------------------------------------------------------
/* ELEMENTS DE LA PAGE ENTIERE */

/* Pour définir des variables */
:root {
  --<nom_variable>: <valeur>;
  /* Couleurs des Bordures */
  --borderColor: #beec47ff;
  --borderDarkColor: #55cc22ff;
  /* Couleurs des Fonds */
  --bgMain: <valeur>;
  --bgBright: <valeur>;
  --bgDark: <valeur>;
  /* Couleurs de Police du texte */
  --fontDark: #386130ff;
  --fontBright: #ffffffff;
  /* Couleurs de Police des liens */
  --linkFontDark: #62700aff;
  --linkFontBright: #acf248ff;
  /* Type des Polices */
  --fontFamily: "<police_préférée>", "<police_alternative>", sans-serif;
  --itemsFontType: all-petite-caps;
  --textFontType: normal;
}

/* Pour que les marges de tous types soient calculées intelligemment (indispensable pour que tous les navigateurs affichent les memes proportions): */
* {
  box-sizing: border-box;
}

body {
  /* Du fait d'un vieil accident du html: par défaut, le body a une marge. */
  margin: 0;
  /* Du fait d'un vieil accident du html: le body peut etre inférieur à la hauteur de la fenetre. */
  min-height: 100%;
  /* De préférence: "Arial", "Helvetica", sans-serif */
  font-family: var(--fontFamily);
  font-variant: var(--textFontType);
  background-color: var(--bgMain);
  display: grid;
  grid-template-rows: 15vh 77vh 8vh;
  grid-template-columns: 15vw 1fr;
  grid-template-areas:  "H H"
                        "M A"
                        "F F";
}

/* ELEMENTS DU HEADER */

header {
  grid-area: H;
  cursor: default;
  background-color: inherit;
  display: grid;
  grid-template-rows: 75% 25%;
  grid-template-columns: justify;
  grid-template-areas:  "S"
                        "N";
}

/* a[role="slider"] */
[role="slider"] {
  display: flex;
  flex-direction: row;
  align-items: center;
  justify-content: center;
  grid-area: S;
}

nav {
  display: flex;
  justify-content: space-evenly;
  border-top: solid var(--borderColor) 1px;
  border-bottom: solid var(--borderColor) 1px;
  background-color: var(--bgBright);
  grid-area: N;
}

ul[role="menubar"],
ul[role="menubar"] * {
  display: flex;
  margin: 0;
  padding: 0;
  width: 85%;
  height: 100%;
  border-right: solid var(--borderColor) 1px;
  align-items: center;
  justify-content: space-evenly;
  flex: 1 100%;
  list-style-type: none;
}

span[role="search"],
span[role="search"] * {
  display: flex;
  flex-flow: nowrap;
  padding: 0;
}

span[role="search"] input[type="text"] {
  background-color: #ffffff99;
  padding-left: 5px;
  padding-right: 5px;
  font-size: 11pt;
  border: solid var(--borderDarkColor) 1px;
}

span[role="search"] button {
  padding-left: 5px;
  padding-right: 5px;
  background-color: var(--bgBright);
  border: none;
}

span[role="search"] button:after {
  content: "⋗";
}




/* ELEMENTS DU MAIN */

main {
  display: flex;
  flex-direction: column;
  background-color: inherit;
  cursor: default;
  padding-left: 30px;
  font-size: 13pt;
  grid-area: M;
}




/* ELEMENTS DU ASIDE */

aside {
  padding: 10px;
  display: flex;
  flex-direction: column;
  cursor: default;
  background-color: inherit;
  grid-area: A;
}

section[role="note"] {
  border: solid var(--borderColor) 1px;
  margin: 5px;
  margin-top: 0;
  padding: 6px;
  background-color: var(--bgBright);
  font-stretch: semi-condensed;
}




/* ELEMENTS DU FOOTER */

footer {
  display: flex;
  flex-direction: row;
  padding: 10px;
  cursor: default;
  justify-content: space-evenly;
  border: solid var(--borderColor) 1px;
  background-color: var(--bgDark);
  grid-area: F;
}

footer a {
  text-decoration: none;
  color: var(--linkFontBright);
}

footer li {
  list-style: none;
}

footer li:before, footer li:after {
  content: "::";
  color: inherit;
  width: 1em;
  margin-left: 0.5em;
  margin-right: 0.5em;
}

/* ELEMENTS COMMUNS */

header,
aside > h2,
footer {
  font-variant: var(--itemsFontType);
}

a {
  text-decoration: none;
  color: var(--linkFontDark);
}

h1,
.h1,
a[role="slider"] {
  font-size: 25pt;
}

h1,
h2 {
  font-weight: 100;
}

p,
h2,
h3 {
  text-align: justify;
  text-indent: 15px;
}

ul[role="menubar"] li,
span[role="search"] button,
[role="note"],
[role="note"] h1,
[role="note"] p,
footer
{
  color: var(--fontBright);
}


    [ OU ]
 
<conteneur> {
  display: grid;
  width: 50%;
  grid-template-columns: 41% 59%;
  grid-column-gap: 0;
  grid-row-gap: 1px;
}
 
element {
  display: block;
  grid-column-start: 1;
  grid-column-end: 3;
  width: 100%;
}
  
element {
  display: block;
  grid-column: 1;
  width: 100%;
}
 
element {
  display: block;
  grid-column: 2;
  width: 100%;
}
 
element {
  display: block;
  grid-column-start: 1;
  grid-column-end: 3;
  width: 100%;
}
 
// Mesures relatives : 
• 1%, 1fr, 1vw/vh, 
• calc() // permet d'affecter le resultat d'un calcul), 
• attr(<propriété>) // (permet d'affecter la valeur d'une propriété css existante).

------------------------------------------------------------
A rédiger dans ma FAQ 
------------------------------------------------------------
 
• HTML: Couleurs en hexadecimal 
  - Du plus foncé (0) au plus clair (F): #RVB
  - Du plus foncé (00) au plus clair (FF): #RRVVBB
 
• JS: foreach { <instruction>; } devient for (<variable_en_declaration> of <tableau>) { <instruction>; }
• JS: const <variable> // est readonly
• JS: let <variable> // a une portée limitée aux { dans lesquelles elle se trouve}
• JS: var <variable> // a une portée limitée à la fonction dans lesquelle elle se trouve
• JS Regex: On teste une expression regulière avec "element.value.match(regex_in_a_variable)" et non "regex_in_a_variable.test(element.value)" car la fonction javascript test() ne reconnais pas les regex contenues dans des variables. */
        
• JS: document.querySelector("#id") <=> document.getElementById("id")
• JS: document.querySelector("tag") <=> document.getElementsByTagName("tag")[0]   
• JS: var tableau_d'éléments = <dom_element>.querySelectorAll("type 1 d'élements, type 2 d'élement, etc.")
• DOM: Syntax avancée : 
  <dom_element>.querySelector (
  "#identifiant" OU ".<classe>" OU "<balise>" OU <balise>[<propriété>='<valeur>'] OU "<element> <element_enfant>" );
  Exemple: Affichera en marron tous les passage en italique dans les paragraphes: 
  var mon_element = document.querySelector("p");
  mon_element.querySelector("i").color="brown");
   
• CSS: Priorité des styles en cas de conflit : #element > .element > tag
• CSS: element {
  display: flex;
  justify-content: center; Centre verticalement son contenu (si display=flex)
  align-items: center; Centre horizontalement son contenu (si display=flex)
  font-variant: small-caps;
  font-variant: all-petite-caps;
  }
   
• DOM acess (in css and querySelector and etc.) : 
  element + element
  element > premier_enfant_seulement
  element enfant1 + enfant2
  element enfant1 enfant_de_enfant1
  element[champs]
  element[champs='valeur_du_champs']
   
• HTML: placeholder = <TAG valeur_par_defaut_souhaitée="valeur affichée comme background dans le champs seulement quand il est vide"></TAG>
 
• JS: console.log("Hello") = alert("Hello") qui ne bloque pas l'execution du code et s'affiche  dans les outils de developpement de Google Chrome.
 
• HTML: <script type="./fichier.json">
  écriture de la structure du json
  </script>

------------------------------------------------------------
====== SQL ======
------------------------------------------------------------

• SQL: 
Doit être écrit dans du PHP, pour communiquer avec un script.
Peut etre injecté dans une BDD si écrit dans un fichier .sql

-- Commentaire
/* Commentaire */

Exemple de syntaxe :

-- Pour renseigner un seul enregistrement à la fois
INSERT INTO `<table_mysql>` 
            -- OU [<table_sqlserver>] 
            -- OU <nom_de_table_non_reservés_par_la_bdd>
(
  `<champs_sous_mysql>`
  -- OU [<champs_sous_sqlserver>] 
  -- OU <nom_de_champs_non_reservés_par_la_bdd>
)
VALUES 
(
  '<valeur>'
)

-- Pour renseigner plusieurs enregistrements en même temps
INSERT INTO <table>
(<champs>, <champs>)
VALUES 
// Ligne 1:
('<valeur>', '<valeur>'),
// Ligne 2:
('<valeur>','<valeur>');
-- Autre syntaxe:
INSERT INTO <table> (<champs>, <champs>) VALUES ('<valeur>', '<valeur>'), ('<valeur>', '<valeur>');
-- Autre syntaxe:
INSERT INTO <table> (<champs>, <champs>) 
VALUES ('<valeur>', '<valeur>'), ('<valeur>', '<valeur>');

----------------------------------------
-- Base de données :  repartout

SET SQL_MODE = "NO_AUTO_VALUE_ON_ZERO";
SET AUTOCOMMIT = 0;
START TRANSACTION;
SET time_zone = "+00:00";

----------------------------------------
-- Creation d'une table (ici "fournisseurs") (en ecrasement):

DROP TABLE IF EXISTS fournisseurs;

CREATE TABLE IF NOT EXISTS fournisseurs (
  id_fournisseur int(11) NOT NULL AUTO_INCREMENT COMMENT 'Identifiant du fournisseur (généré automatiquement)',
  nom_fournisseur varchar(40) NOT NULL COMMENT 'Nom de famille du fournisseur',
  tel_fournisseur char(15) NOT NULL COMMENT 'Numéro de téléphone du fournisseur (format international, longueur fixe)',
  adresse_fournisseur varchar(255) NOT NULL COMMENT 'Adresse postale du fournisseur',
  PRIMARY KEY (id_fournisseur)
) ENGINE=InnoDB AUTO_INCREMENT=4 DEFAULT CHARSET=utf8;
-- {COMMIT};

-- Renseignement de la table :

INSERT INTO fournisseurs (id_fournisseur, nom_fournisseur, tel_fournisseur, adresse_fournisseur) 
VALUES
(3, 'Juste quelques pneus', '03.89.89.89.87', '11 rue de Mulhouse 68400 Riedisheim');
-- {COMMIT};

-- Modification d'une valeur de la table :

UPDATE fournisseurs
SET nom_fournisseur='Pneus pour tous' --, <champs>='<nouvelle valeur>'
WHERE id_fournisseur=3 -- OR <condirion> AND <condition>
-- {COMMIT};

-- Modification d'un champs de la table :

ALTER TABLE fournisseurs
ADD logo_fournisseur VARCHAR(255)
-- {COMMIT};

-- Lecture de la table : 

SELECT nom_fournisseur, SUM(Entrees)
FROM fournisseurs
WHERE id_fournisseur >= 2
GROUP BY Annee_Film
HAVING SUM(Entrees) < 5
ORDER BY 2 ASC
-- {COMMIT};

----------------------------------------
• RegEx:

WHERE <champs> LIKE '
  (One character:) _ 
  (Any number of characters:) % 
  (Everything:) *
  (Les valeurs qui commencent par un caractère compris entre a et d:) "[a-d]%"
';

• Fonctions: 

- AVG() 
- MIN() 
- MAX() 
- SUM() 
- COUNT()

• SQL's Data Definition Language (DDL) defines the database schema. Comprend:

CREATE – is used to create the database or its objects (like table, index, function, views, store procedure and triggers).
DROP – is used to delete objects from the database.
ALTER-is used to alter the structure of the database.
TRUNCATE réinitialize toutes les lignes y compris les données readonly, les auto-incréments, et les espaces de remplissage 

des champts à taille fixe
COMMENT –is used to add comments to the data dictionary.
RENAME –is used to rename an object existing in the database.

• SQL's Data Manipulation Language (DML) manipulates data. Comprend:

SELECT – is used to retrieve data from the a database.
INSERT – is used to insert data into a table.
UPDATE – is used to update existing data within a table.
DELETE réinitialize les champs modifiables des lignes

• SQL's Data Control Language (DCL) controls permissions and rights. Comprend: 

GRANT-gives user’s access privileges to database.
REVOKE-withdraw user’s access privileges given by using the GRANT command.

• SQL's Transaction Control Language (TCL) deals with internal transactions. Comprend:

COMMIT– commits a Transaction.
ROLLBACK– rollbacks a transaction in case of any error occurs.
SAVEPOINT
SET TRANSACTION

------------------------------------------------------------
====== PHP ======
------------------------------------------------------------

• MODELE de liaison HTML/PHP - BDD :

<?php
$host="localhost";
$port=3306;
$socket="";
$user="root";
$password="";
$dbname="repartout";

$con = new mysqli($host, $user, $password, $dbname, $port, $socket)
	or die ('Could not connect to the database server' . mysqli_connect_error());

//$con->close();

$query = "

USE repartout;  
/* Définit la bdd sur laquelle on travaille. */

SET FOREIGN_KEY_CHECKS=0; 
/* Désactive le control des relations entre les tables. Permet de modifier des tables sans respecter les critères d'ordre de creation ou de suppression imposés par leurs relations. */

";

if ($stmt = $con->prepare($query)) 
{
    $stmt->execute();
    $stmt->bind_result($field1, $field2);
    while ($stmt->fetch()) {
        //printf("%s, %s\n", $field1, $field2);
    }
    $stmt->close();
}
?>

• Exemple  de recupération des données passées en GET : 

<code html>
<?php
  $saisie = "Alan";
  echo '<h3>Salut, '.$saisie.' !</h3>'; // Est interprété plus rapidement.
  echo "<h3>Salut, $saisie !</h3>"; // Est plus sécurité. Si le texte est écrit entre "...", les variables incluses dedans sont reconnues et interprétées.
  // Si: http://localhost/<chemin>.php?nom=Dupont&age=53
  $nom = $_GET['nom'];
  $age = $_GET['age'];
  echo "Bienvenue, $nom. Vous avez $age ans. ";
?>

• Convertir un string en entier : intval(<string>)
NB: Si la valeur n'est pas convertible, 0 sera renvoyé.

• NB: Toutes les variables commencant par une "_" sont en lecture seule.
